# encoding: UTF-8
require "rubygems"
require "tmpdir"
require "bundler/setup"
require "jekyll"
require "stringex"
require "fileutils"

# Change your GitHub reponame
GITHUB_REPONAME = "dixonmartinez/dixonmartinez.github.io"
GITHUB_REPO_BRANCH = "gh-pages"

SOURCE = "./"
source_dir = "./"
posts_dir = "_posts"
new_page_ext = "md"
new_post_ext = "md"
DEST = "_site"
CONFIG = {
  'layouts' => File.join(SOURCE, "_layouts"),
  'posts' => File.join(SOURCE, "_posts"),
  'pages' => "pages",
  'post_ext' => "md",
  'page_ext' => "md",
  'categories' => File.join(SOURCE, "categories"),
  'tags' => File.join(SOURCE, "tags")
}

task default: %w[generate]

desc "Generate blog files"
task :generate do
  Jekyll::Site.new(Jekyll.configuration({
    "source"      => "./",
    "destination" => "_site",
    "config"      => "_config.yml"
  })).process
end

desc "Build site"
task :build do
    puts "Bulding site..."
    Jekyll::Commands::Build.process(profile: true)
end
desc "Clean site"
task :clean do
    puts 'Cleaning up _site...'.bold
    Jekyll::Commands::Clean.process({})
end

# usage rake new_post[my-new-post] or rake new_post['my new post'] 
# or rake new_post (defaults to "new-post")
desc "Begin a new post in #{CONFIG['posts']}"
task :new_post, :title do |t, args|
  abort("rake aborted: '#{CONFIG['posts']}' directory not found.") unless FileTest.directory?(CONFIG['posts'])
  args.with_defaults(:title => 'new-post')
  title = args.title;

  tags = ""
  categories = ""

  # tags
  env_tags = ENV["tags"] || ""
  tags = strtag(env_tags)

  # categorias
  env_cat = ENV["category"] || ""
  categories = strtag(env_cat)

  # slug do post
  slug = mount_slug(title)

  begin
    date = (ENV['date'] ? Time.parse(ENV['date']) : Time.now).strftime('%Y-%m-%d')
    time = (ENV['date'] ? Time.parse(ENV['date']) : Time.now).strftime('%T')
  rescue => e
    puts "Error - date format must be YYYY-MM-DD, please check you typed it correctly!"
    exit -1
  end

  filename = File.join(CONFIG['posts'], "#{date}-#{slug}.#{CONFIG['post_ext']}")
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end

  puts "Creating new post: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "author: #{ENV['USER']}"
    post.puts "title: \"#{title.gsub(/-/,' ')}\""
    post.puts "permalink: #{slug}"
    post.puts "date: #{date} #{time}"
    post.puts "comments: true"
    post.puts "description: \"#{title}\""
    post.puts 'keywords: ""'
    post.puts "categories:"
    post.puts "#{categories}"
    post.puts "tags:"
    post.puts "#{tags}"
    post.puts "published: true"
    post.puts "---"
    post.puts
    post.puts
    post.puts
    post.puts "<!--more-->"
  end


end # task :post


# usage rake new_page[my-new-page] or rake new_page[my-new-page.html] 
# or rake new_page (defaults to "new-page.markdown")
desc "Create a new page."
task :new_page, :filename do |t, args|
    #raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
    abort("rake aborted: '#{CONFIG['pages']}' directory not found.") unless FileTest.directory?(CONFIG['pages'])
    args.with_defaults(:filename => 'new-page')
    page_dir = [CONFIG['pages']]#[source_dir]
    if args.filename.downcase =~ /(^.+\/)?(.+)/
        filename, dot, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and extension
        title = filename
        page_dir.concat($1.downcase.sub(/^\//, '').split('/')) unless $1.nil?  # Add path to page_dir Array
        if extension.nil?
            page_dir << filename
            filename = "index"
        end
        extension ||= "#{CONFIG['page_ext']}" 
        page_dir = page_dir.map! { |d| d = d.to_url }.join('/')                # Sanitize path
        filename = filename.downcase.to_url
        mkdir_p page_dir
        file = "#{page_dir}/#{filename}.#{extension}"
        if File.exist?(file)
            abort("rake aborted!") if ask("#{file} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
        end
        puts "Creating new page: #{file}"
        open(file, 'w') do |page|
            page.puts "---"
            page.puts "layout: page"
            page.puts "title: \"#{title.capitalize.gsub(/-/,' ')}\""
            page.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
            page.puts "comments: true"
            page.puts "sharing: true"
            page.puts "footer: true"
            page.puts "---"
        end

    else
        puts "Syntax error: #{args.filename} contains unsupported characters"
    end
  
end # task :new_page




desc "list tasks"
task :list do
    puts "Tasks: #{(Rake::Task.tasks - [Rake::Task[:list]]).join(', ')}"
    puts "(type rake -T for more detail)\n\n"
end

def mount_slug(title)
    slug = str_clean(title)
    slug = slug.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')

    return slug
end

def str_clean(title)
    return title.tr("ÀÁÂÃÄÅàáâãäåĀāĂăĄąÇçĆćĈĉĊċČčÐðĎďĐđÈÉÊËèéêëĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħÌÍÎÏìíîïĨĩĪīĬĭĮįİıĴĵĶķĸĹĺĻļĽľĿŀŁłÑñŃńŅņŇňŉŊŋÒÓÔÕÖØòóôõöøŌōŎŏŐőŔŕŖŗŘřŚśŜŝŞşŠšſŢţŤťŦŧÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųŴŵÝýÿŶŷŸŹźŻżŽž", "AAAAAAaaaaaaAaAaAaCcCcCcCcCcDdDdDdEEEEeeeeEeEeEeEeEeGgGgGgGgHhHhIIIIiiiiIiIiIiIiIiJjKkkLlLlLlLlLlNnNnNnNnnNnOOOOOOooooooOoOoOoRrRrRrSsSsSsSssTtTtTtUUUUuuuuUuUuUuUuUuUuWwYyyYyYZzZzZz")
end

def strtag(str_tags)
    tags = "";

    if !str_tags.nil?
        arr_tags = str_tags.split(",")
        arr_tags.each do |t|
        tags = tags + "- " + t.delete(' ') + "\n"
        end
    end

    return tags
end

def ask(message, valid_options)
    if valid_options
        answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')} ") while !valid_options.include?(answer)
    else
        answer = get_stdin(message)
    end
    answer
end

def get_stdin(message)
    print message
    STDIN.gets.chomp
end

